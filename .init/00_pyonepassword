# shellcheck shell=bash
# TODO: Explain how to use this
# This mostly should be ignored unless it's obvious what it's for
_realhome="$(readlink -f R "$(dirname "$0")")"
_realhome="$(cd "$_realhome" || exit; pwd)"
_pyonepasswd_src_root="$(dirname "$_realhome")"

if [ -n "$PROJSRC" ];
then
    alias cdpyonepw='cd "$_pyonepasswd_src_root"; ./scripts/archive_op_binary.sh'
fi

function _local_branches() {
    if [ "$PWD" != "$_pyonepasswd_src_root" ];
    then
        return
    fi
    local cur_="$1"
    local myarray
    myarray=( $(git for-each-ref --sort=committerdate --format='%(refname:short)' "refs/heads/$cur_*" "refs/heads/$cur_*/**") )
    compadd -V unsorted - "${myarray[@]}"

}

function _local_branch_completion(){
    local branch="$1"
    _arguments "1:first:($(local_branches "$branch"))"
}

function deletebranch_pyop(){
    local branch="$1"
    if [ "$PWD" != "$_pyonepasswd_src_root" ];
    then
        echo "wrong directory to run $_pyonepasswd_src_root/scripts/deletebranch"
        return
    fi
    "$_pyonepasswd_src_root/scripts/deletebranch" "$branch"
}

function pytest_pyop(){
    if [ "$PWD" != "$_pyonepasswd_src_root" ];
    then
        echo "wrong directory to run 'pytest_pyop'"
        return
    fi
    # local _nproc
    # _nproc="$(nproc)"
    # echo "pytest: $_nproc parallel processes"
    # pytest -n "$_nproc"
    pytest -n auto
}

function mypy_pyop(){
    if [ "$PWD" != "$_pyonepasswd_src_root" ];
    then
        echo "wrong directory to run 'mypy_pyop'"
        return
    fi

    mypy --package pyonepassword --check-untyped-defs
}

if [ -n "$ZSH_VERSION" ];
then
    compdef _local_branches deletebranch_pyop pytest_pyop mypy_pyop
fi

if [ -f "$_pyonepasswd_src_root/dot_env_files/.env_pyonepassword_test_rw" ];
then
    alias op_sa_rw="\$_pyonepasswd_src_root/scripts/op_env \$_pyonepasswd_src_root/dot_env_files/.env_pyonepassword_test_rw"
fi

unset _realhome
